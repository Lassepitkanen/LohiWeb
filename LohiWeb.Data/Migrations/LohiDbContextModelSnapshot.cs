// <auto-generated />
using System;
using LohiWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LohiWeb.Data.Migrations
{
    [DbContext(typeof(LohiDbContext))]
    partial class LohiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("UnixTime");

                    b.Property<double>("Value");

                    b.Property<int?>("WaterLevelLocationId");

                    b.HasKey("Id");

                    b.HasIndex("WaterLevelLocationId");

                    b.ToTable("WaterLevel");
                });

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterLevelLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("WaterLevelLocation");
                });

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AirTemp");

                    b.Property<double>("Alt");

                    b.Property<double>("AltError");

                    b.Property<double>("Depth");

                    b.Property<double>("Heading");

                    b.Property<double>("HeatMap");

                    b.Property<decimal>("Lat");

                    b.Property<double>("LatError");

                    b.Property<decimal>("Lng");

                    b.Property<double>("LngError");

                    b.Property<double>("Speed");

                    b.Property<double>("UnixTime");

                    b.Property<int?>("WaterMeasurementLocationId");

                    b.Property<double>("WaterTemp");

                    b.HasKey("Id");

                    b.HasIndex("WaterMeasurementLocationId");

                    b.ToTable("WaterMeasurement");
                });

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterMeasurementLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("WaterMeasurementLocation");
                });

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterMeasurementRaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AirTemp");

                    b.Property<double>("Alt");

                    b.Property<double>("AltError");

                    b.Property<double>("Depth");

                    b.Property<double>("Heading");

                    b.Property<double>("HeatMap");

                    b.Property<decimal>("Lat");

                    b.Property<double>("LatError");

                    b.Property<decimal>("Lng");

                    b.Property<double>("LngError");

                    b.Property<double>("Speed");

                    b.Property<double>("UnixTime");

                    b.Property<int?>("WaterMeasurementLocationId");

                    b.Property<double>("WaterTemp");

                    b.HasKey("Id");

                    b.HasIndex("WaterMeasurementLocationId");

                    b.ToTable("WaterMeasurementRaw");
                });

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterLevel", b =>
                {
                    b.HasOne("LohiWeb.Data.Entities.WaterLevelLocation")
                        .WithMany("WaterLevels")
                        .HasForeignKey("WaterLevelLocationId");
                });

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterMeasurement", b =>
                {
                    b.HasOne("LohiWeb.Data.Entities.WaterMeasurementLocation")
                        .WithMany("WaterMeasurements")
                        .HasForeignKey("WaterMeasurementLocationId");
                });

            modelBuilder.Entity("LohiWeb.Data.Entities.WaterMeasurementRaw", b =>
                {
                    b.HasOne("LohiWeb.Data.Entities.WaterMeasurementLocation")
                        .WithMany("RawWaterMeasurement")
                        .HasForeignKey("WaterMeasurementLocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
